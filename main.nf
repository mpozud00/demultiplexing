#!/usr/bin/env nextflow
/*
========================================================================================
                         mpozud00/demultiplexing
========================================================================================
mpozud00/demultiplexing Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/mpozud00/demultiplexing
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    log.info mpozud00Header()
    log.info """

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run mpozud00/demultiplexing --input '*.txt' -profile docker

    Mandatory arguments:
      --input [file]                Samplesheet with indexes and samples information
      -profile                      Configuration profile to use. Can use multiple (comma separated)
                                    Available: conda, docker, singularity, awsbatch, test and more.

    Demultiplexing parameters:
      --max_errors                  Maximum error rate accepted. For 8bp adapters we need 0.15 to allow 1bp of error. (Default: 0.15)
      --save_untrimmed              Saves untrimmed reads when demultiplexing (Default: FALSE)

    QC:
      --skipQC                      Skip all QC steps apart from MultiQC
      --skipFastQC                  Skip FastQC

    Other options
      --outdir                      The output directory where the results will be saved
      -w/--work-dir                 The temporary directory where intermediate data will be saved
      --email                       Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail               Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size      Threshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name                         Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic
    """.stripIndent()
}


// Show help message
if (params.help) {
    helpMessage()
    exit 0
}


/*
 * SET UP CONFIGURATION VARIABLES
 */

// Define regular variables so that they can be overwritten
max_errors = params.max_errors

// Validate inputs

if (params.input) { ch_input = file(params.input, checkIfExists: true) } else { exit 1, "Input samplesheet file not specified!" }

if (!params.outdir) {
  params.outdir = params.run
}


////////////////////////////////////////////////////
/* --          CONFIG FILES                    -- */
////////////////////////////////////////////////////

ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)


// Header log info
log.info mpozud00Header()
def summary = [:]
if (workflow.revision) summary['Pipeline Release'] = workflow.revision
summary['Run Name'] = custom_runName ?: workflow.runName
summary['Input'] = params.input
summary['Demultiplexing max error rate'] = max_errors
summary['Max Resources'] = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['User'] = workflow.userName

summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
  summary['E-mail Address']    = params.email
  summary['E-mail on failure'] = params.email_on_fail
  summary['MultiQC maxsize']   = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"


// Check the hostnames against configured profiles
checkHostname()

def create_workflow_summary(summary) {
    def yaml_file = workDir.resolve('workflow_summary_mqc.yaml')
    yaml_file.text  = """
    id: 'mpozud00-demultiplexing-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'mpozud00/demultiplexing Workflow Summary'
    section_href: 'https://github.com/mpozud00/demultiplexing'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
${summary.collect { k,v -> "            <dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }.join("\n")}
        </dl>
    """.stripIndent()

   return yaml_file
}

/*
 * Parse software version numbers
 */
process get_software_versions {
    publishDir "${params.outdir}/pipeline_info", mode: 'copy',
        saveAs: { filename ->
            if (filename.indexOf(".csv") > 0) filename
            else null
        }

    output:
    file 'software_versions_mqc.yaml' into software_versions_yaml
    file "software_versions.csv"

    script:
    """
    echo $workflow.manifest.version &> v_ngi_rnaseq.txt
    echo $workflow.nextflow.version &> v_nextflow.txt
    fastqc --version &> v_fastqc.txt
    cutadapt --version &> v_cutadapt.txt
    multiqc --version &> v_multiqc.txt
    scrape_software_versions.py &> software_versions_mqc.yaml
    """
}



/*
 * LOAD SAMPLESHEET and assign get the columns we will use for demultiplexing
*/

ch_input
  .splitCsv(header:false, sep:'\t')
  .map { ch_input }
  .into { ch_samplesheet_demux }

ch_samplesheet_demux
  .map { [ it[0], it[1], it[2], it[3], it[4], it[5] ] }
  .set { ch_demux }



/*
 * STEP 1 - Demultiplex - Index1
 */

process demux_index {
  tag "$sample"
  label 'process_low'
  publishDir "${params.outdir}/${run_id}/${lane}/1-Index-removal", mode: 'copy',
  saveAs: { filename ->
    if (filename.endsWith(".fq.gz")) filename
  }

  input:
  set val(sample), val(index), val(index2), val(barcode), val(run_id), val(lane) from ch_demux

  output:
  set val(sample), path("*.fq.gz"), val(index), val(index2), val(barcode), val(run_id), val(lane) into ch_demux_index2

  script:
  discard = params.save_untrimmed ? '' : '--discard-untrimmed'
  read1 = file("data/fastq/${run_id}/${lane}/${run_id}_${lane}_read_1.fq.gz", checkIfExists: true)
  read2 = file("data/fastq/${run_id}/${lane}/${run_id}_${lane}_read_2.fq.gz", checkIfExists: true)
  read1_index = "${sample}_${run_id}_${lane}_${index}_R1.fq.gz"
  read2_index = "${sample}_${run_id}_${lane}_${index}_R2.fq.gz"

  if (index == "NNNNNNNN") {
    """
    cutadapt -l 100 -o $read1_index $read1
    cutadapt -l 100 -o $read2_index $read2
    """
  } else {
    """
    cutadapt \
    -e $max_errors \
    --no-indels \
    -a ${sample}="${index}$" \
    -o $read2_index -p $read1_index \
    $read2 $read1 \
    $discard
    """
  }

}



/*
 * STEP 2 - Demultiplex - Index2
 */

process demux_index2 {
  tag "$sample"
  label 'process_low'
  publishDir "${params.outdir}/${run_id}/${lane}/2-Index2-removal", mode: 'copy',
  saveAs: { filename ->
    if (filename.endsWith(".fq.gz")) filename
  }

  input:
  set val(sample), path(reads), val(index), val(index2), val(barcode), val(run_id), val(lane) from ch_demux_index2

  output:
  set val(sample), path("*.fq.gz"), val(index), val(index2), val(barcode), val(run_id), val(lane) into ch_demux_BC

  script:
  discard = params.save_untrimmed ? '' : '--discard-untrimmed'
  read1 = "${reads[0]}"
  read2 = "${reads[1]}"
  read1_index2 = "${sample}_${run_id}_${lane}_${index}_${index2}_R1.fq.gz"
  read2_index2 = "${sample}_${run_id}_${lane}_${index}_${index2}_R2.fq.gz"

  if (index2 == "NNNNNNNN") {
    if (index == "NNNNNNNN") {
      """
      mv $read1 $read1_index2
      mv $read2 $read2_index2
      """
    } else {
      """
      cutadapt -l 100 -o $read1_index2 $read1
      cutadapt -l 100 -o $read2_index2 $read2
      """
    }
  } else {
    """
    cutadapt \
    -e $max_errors \
    --no-indels \
    -a ${sample}="${index2}$" \
    -o $read2_index2 -p $read1_index2 \
    $read2 $read1 \
    $discard
    """
  }
}



/*
 * STEP 3 - Demultiplex - BC
 */

process demux_BC {
  tag "$sample"
  label 'process_low'
  publishDir "${params.outdir}/${run_id}/${lane}/3-BC-removal", mode: 'copy',
  saveAs: { filename ->
    if (filename.endsWith(".fq.gz")) filename
  }

  input:
  set val(sample), path(reads), val(index), val(index2), val(barcode), val(run_id), val(lane) from ch_demux_BC

  output:
  set val(sample), path("*.fq.gz"), val(run_id), val(lane) into ch_fastqc

  script:
  discard = params.save_untrimmed ? '' : '--discard-untrimmed'
  read1 = "${reads[0]}"
  read2 = "${reads[1]}"
  read1_BC = "${sample}_${run_id}_${lane}_R1.fq.gz"
  read2_BC = "${sample}_${run_id}_${lane}_R2.fq.gz"

  if (barcode == "NNNNNNNN" | barcode == "NNNNNN") {
    """
    mv $read1 $read1_BC
    mv $read2 $read2_BC
    """
  } else if (barcode.length() > 6) {
    """
    cutadapt \
    -e $max_errors \
    --no-indels \
    -g ${sample}="^${barcode}" \
    -o $read1_BC -p $read2_BC \
    $read1 $read2 \
    $discard
    """
    } else {
    """
    cutadapt \
    -e 0.2 \
    --no-indels \
    -g ${sample}="^${barcode}" \
    -o $read1_BC -p $read2_BC \
    $read1 $read2 \
    $discard
    """
  }
}


/*
 * STEP 4 - FastQC
 */
 if (!params.skipQC || !params.skipFastQC) {

   process fastqc {
     tag "$sample"
     label 'process_medium'
     publishDir "${params.outdir}/${run_id}/${lane}/4-fastqc", mode: 'copy',
     saveAs: { filename ->
       if filename.endsWith(".zip")  "zips/$filename" : filename
     }

     input:
     set val(sample), path(reads), val(run_id), val(lane) from ch_fastqc

     output:
     set path("*_fastqc.{zip,html}"), val(run_id), val(lane) into fastqc_results

     script:
     """
     fastqc --quiet --threads $task.cpus $reads
     """
   }
 } else {
   fastqc_results = Channel.empty()
 }


/*
 * STEP 15 - Output Description HTML
 */

process output_documentation {
    publishDir "${params.outdir}/pipeline_info", mode: params.publish_dir_mode

    input:
    file output_docs from ch_output_docs

    output:
    file "results_description.html"

    script:
    """
    markdown_to_html.r $output_docs results_description.html
    """
}


/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[mpozud00/demultiplexing] Successful: $workflow.runName"
    if (skipped_poor_alignment.size() > 0) {
        subject = "[mpozud00/demultiplexing] Partially Successful (${skipped_poor_alignment.size()} skipped): $workflow.runName"
    }
    if (!workflow.success) {
      subject = "[mpozud00/demultiplexing] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    if (workflow.container) email_fields['summary']['Docker image'] = workflow.container
    email_fields['skipped_poor_alignment'] = skipped_poor_alignment
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp


    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
          if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
          // Try to send HTML e-mail using sendmail
          [ 'sendmail', '-t' ].execute() << sendmail_html
          log.info "[mpozud00/demultiplexing] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
          // Catch failures and try with plaintext
          [ 'mail', '-s', subject, email_address ].execute() << email_txt
          log.info "[mpozud00/demultiplexing] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = file("${output_d}/pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = file("${output_d}/pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";


    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}"
        log.info "${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}"
        log.info "${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}"
    }

    if (workflow.success) {
        log.info "${c_purple}[mpozud00/demultiplexing]${c_green} Pipeline completed successfully${c_reset}"
    } else {
        checkHostname()
        log.info "${c_purple}[mpozud00/demultiplexing]${c_red} Pipeline completed with errors${c_reset}"
    }

}

// Check file extension
def hasExtension(it, extension) {
    it.toString().toLowerCase().endsWith(extension.toLowerCase())
}

def flomicsHeader() {
  // Log colors ANSI codes
  c_blue = params.monochrome_logs ? '' : "\033[0;34m";
  c_dim = params.monochrome_logs ? '' : "\033[2m";
  c_white = params.monochrome_logs ? '' : "\033[0;37m";
  c_reset = params.monochrome_logs ? '' : "\033[0m";


  return """    -${c_dim}--------------------------------------------------${c_reset}-
  ${c_blue}  __  __  __   __  ___         ${c_reset}
  ${c_blue}  | \/ | |__| |  |  /  |  |     ${c_reset}
  ${c_blue}  |    | |    |__| /__ |__|         ${c_reset}
  ${c_white}  mpozud00/demultiplexing v${workflow.manifest.version}${c_reset}
  -${c_dim}--------------------------------------------------${c_reset}-
  """.stripIndent()
}


def checkHostname() {
  def c_reset = params.monochrome_logs ? '' : "\033[0m"
  def c_white = params.monochrome_logs ? '' : "\033[0;37m"
  def c_red = params.monochrome_logs ? '' : "\033[1;91m"
  def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
  if (params.hostnames) {
    def hostname = "hostname".execute().text.trim()
    params.hostnames.each { prof, hnames ->
      hnames.each { hname ->
        if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
          log.error "====================================================\n" +
          "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
          "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
          "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
          "============================================================"
        }
      }
    }
  }
}
